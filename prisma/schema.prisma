// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id              Int               @id @default(autoincrement())
  username        String            @unique
  role            Role              @default(CLIENT)
  email           String?
  phone           String?
  password        String
  reservations    Reservation[]
  transactions    Transaction[]
  studios         Studio[]
  review          Review[]

  @@map("users")
}

model Studio{
  id                Int           @id @default(autoincrement())
  ownerId           Int
  user              User          @relation(fields: [ownerId], references: [id])
  image             String
  name              String        //Default String in prisma = varchar(191)
  description       String        @db.Text // use @db.Text for = varchar(60000)
  address           String        @db.Text
  price             Int
  category          String
  // package           Int
  rating            Int?          //its mean rating can be nullable. Its optional
  room              Int
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  reservations      Reservation[]
  reviews           Review[]
  rooms             Room[]

  @@map("studios")
}

model Reservation{
  // id                Int          @id @default(autoincrement())
  id                String       @id @default(uuid())
  userId			  		Int
  studioId          Int
  room              Int
  duration          Int
  status            Status       @default(PENDING)      
  notes             String?
  rentDate          DateTime     @db.Date
  hasRating         Boolean?     @default(false)
  hasCancel         Boolean?     @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  user              User         @relation(fields: [userId], references: [id])
  studio            Studio       @relation(fields: [studioId], references: [id])
  transactions      Transaction[]

  @@map("reservations")
}

model Transaction{
  // id                Int           @id @default(autoincrement())
  id                String        @id @default(uuid())
  // reservationId     Int
  reservationId     String
  reservation       Reservation   @relation(fields:[reservationId],references:[id])
  user              User          @relation(fields: [userId], references: [id])
  userId			  		Int
  photoPayment      String?
  bank              String?
  sender            String?
  fee               Int           
  totalPayment      Int
  createdAt					DateTime			@default(now())
  updatedAt         DateTime      @updatedAt

  @@map("transactions")
}

model Review{

  id          Int         @id @default(autoincrement())
  userId      Int         
  studioId    Int      
  testimoni   String?     @db.Text
  rating      Int
  createdAt		DateTime			@default(now())
  updatedAt   DateTime      @updatedAt
  studio      Studio      @relation(fields: [studioId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@map("reviews")
}
model Room{

  id            Int                  @id @default(autoincrement())
  studioId      Int      
  roomNumber    Int
  availability  AvailabilityRoom?    @default(NONAKTIF)
  createdAt		  DateTime			@default(now())
  updatedAt     DateTime      @updatedAt
  studio        Studio               @relation(fields: [studioId], references: [id])
  // user        User        @relation(fields: [userId], references: [id])

  @@map("rooms")
}

enum AvailabilityRoom {
  AKTIF
  NONAKTIF
}
enum Role {
  OWNER
  CLIENT
}
enum Status {
  PENDING
  AKTIF
  DIBATALKAN
  SELESAI
}
